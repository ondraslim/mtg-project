// <auto-generated />
using System;
using DAL.EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.EntityFramework.Migrations
{
    [DbContext(typeof(MtgDbContext))]
    partial class MtgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Common.Entities.DeckEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeckEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ada578f0-50b1-4bf4-834e-d50a5d4201e5"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "René Deck 1",
                            UserId = new Guid("abcb66ba-e6c0-4145-b793-09429b969a78")
                        },
                        new
                        {
                            Id = new Guid("07c3c09b-3bd1-4b27-9453-fc6e356e075c"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "René Deck 2",
                            UserId = new Guid("abcb66ba-e6c0-4145-b793-09429b969a78")
                        },
                        new
                        {
                            Id = new Guid("fc43bac5-0203-456e-8cbe-35223f895a5a"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rudolf Deck 1",
                            UserId = new Guid("6f3e6f0b-e245-4d8b-a685-9141b8efbc79")
                        });
                });

            modelBuilder.Entity("DAL.Common.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartingHp")
                        .HasColumnType("int");

                    b.Property<int>("TurnCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbef72ad-12d2-4436-9854-7dffd6416fdc"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingHp = 40,
                            TurnCount = 11
                        },
                        new
                        {
                            Id = new Guid("d4b640a5-70b2-4d1d-8b43-f6a16d4b957a"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingHp = 40,
                            TurnCount = 8
                        });
                });

            modelBuilder.Entity("DAL.Common.Entities.GameParticipationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameParticipationEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39b5af36-1363-4b21-b428-ffa149608fec"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeckId = new Guid("ada578f0-50b1-4bf4-834e-d50a5d4201e5"),
                            GameId = new Guid("fbef72ad-12d2-4436-9854-7dffd6416fdc"),
                            IsWinner = false,
                            UserId = new Guid("abcb66ba-e6c0-4145-b793-09429b969a78")
                        },
                        new
                        {
                            Id = new Guid("c2f6a555-1085-4193-83da-df84cfbef4be"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeckId = new Guid("fc43bac5-0203-456e-8cbe-35223f895a5a"),
                            GameId = new Guid("fbef72ad-12d2-4436-9854-7dffd6416fdc"),
                            IsWinner = true,
                            UserId = new Guid("6f3e6f0b-e245-4d8b-a685-9141b8efbc79")
                        },
                        new
                        {
                            Id = new Guid("ebfe6d78-8d09-4194-a0ae-4989170052a2"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeckId = new Guid("07c3c09b-3bd1-4b27-9453-fc6e356e075c"),
                            GameId = new Guid("d4b640a5-70b2-4d1d-8b43-f6a16d4b957a"),
                            IsWinner = true,
                            UserId = new Guid("abcb66ba-e6c0-4145-b793-09429b969a78")
                        },
                        new
                        {
                            Id = new Guid("05a6410d-3d20-4f40-8159-89710eff8409"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeckId = new Guid("fc43bac5-0203-456e-8cbe-35223f895a5a"),
                            GameId = new Guid("d4b640a5-70b2-4d1d-8b43-f6a16d4b957a"),
                            IsWinner = false,
                            UserId = new Guid("6f3e6f0b-e245-4d8b-a685-9141b8efbc79")
                        });
                });

            modelBuilder.Entity("DAL.Common.Entities.StatsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("DamageReceived")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameParticipationEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameParticipationEntityId")
                        .IsUnique();

                    b.ToTable("StatsEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17562946-6929-4e18-8bdb-cfc7095ab8e0"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DamageDealt = 22,
                            DamageReceived = 49,
                            GameParticipationEntityId = new Guid("39b5af36-1363-4b21-b428-ffa149608fec"),
                            Kills = 0
                        },
                        new
                        {
                            Id = new Guid("dde328da-8901-4422-8bae-51191fe1d346"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DamageDealt = 49,
                            DamageReceived = 22,
                            GameParticipationEntityId = new Guid("c2f6a555-1085-4193-83da-df84cfbef4be"),
                            Kills = 1
                        },
                        new
                        {
                            Id = new Guid("1d146ed3-10b8-4fe4-bd40-669bc203d073"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DamageDealt = 88,
                            DamageReceived = 11,
                            GameParticipationEntityId = new Guid("ebfe6d78-8d09-4194-a0ae-4989170052a2"),
                            Kills = 1
                        },
                        new
                        {
                            Id = new Guid("6194b58a-aa87-4c07-87c5-d7b7eb3a1dd9"),
                            Created = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DamageDealt = 11,
                            DamageReceived = 88,
                            GameParticipationEntityId = new Guid("05a6410d-3d20-4f40-8159-89710eff8409"),
                            Kills = 0
                        });
                });

            modelBuilder.Entity("DAL.Common.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolesString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcb66ba-e6c0-4145-b793-09429b969a78"),
                            Created = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "René",
                            PasswordHash = "",
                            RolesString = "User"
                        },
                        new
                        {
                            Id = new Guid("6f3e6f0b-e245-4d8b-a685-9141b8efbc79"),
                            Created = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rudolf",
                            PasswordHash = "",
                            RolesString = "User"
                        });
                });

            modelBuilder.Entity("DAL.Common.Entities.DeckEntity", b =>
                {
                    b.HasOne("DAL.Common.Entities.UserEntity", "UserEntity")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Common.Entities.GameParticipationEntity", b =>
                {
                    b.HasOne("DAL.Common.Entities.DeckEntity", "Deck")
                        .WithMany("GameParticipations")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Common.Entities.GameEntity", "GameEntity")
                        .WithMany("GameParticipations")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Common.Entities.UserEntity", "UserEntity")
                        .WithMany("GameParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Common.Entities.StatsEntity", b =>
                {
                    b.HasOne("DAL.Common.Entities.GameParticipationEntity", "GameParticipationEntity")
                        .WithOne("StatsEntity")
                        .HasForeignKey("DAL.Common.Entities.StatsEntity", "GameParticipationEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
